#!/usr/bin/env ruby

require 'optparse'
require "pp"
require 'ostruct'
require	'FileUtils'

# set up the load path so that `suland` can be found
$:.unshift File.join(File.dirname(__FILE__), %w{ .. lib })
require 'suland'


class SulandOptParser

	def self.parse( args )

		options = OpenStruct.new
		options.verbose = true

		root = File.expand_path('../../', __FILE__ )

		option_parser = OptionParser.new do |opts|
			opts.banner = "here is help message"

			opts.on('-t', '--test', 'run all test files') do
				# find the tests under the folder `test` folder
				Dir["#{root}/test/*.rb"].each do |fileName|
					# call shell to run the tests
					system "ruby #{fileName}"
				end
			end # end '-t'

			opts.on('--clean', 'clean all extra test data') do
				deletedFiles = []
				Dir.foreach( "#{root}/test/" ) do |dirName|
					pattern = /test*/
					match = pattern =~ dirName

					pattern = /^\./
					matchHidden = pattern =~ dirName

					if matchHidden.nil? and !dirName.eql?('..') and match.nil?
						deletedFiles << dirName
						FileUtils.remove_dir( "#{root}/test/#{dirName}/" )
					end
				end
				puts "deleted files #{deletedFiles}"
			end # end '--clean'

			opts.on('--build', 'create all static files') do
				config = Suland::Configuration.new().configurationFromFile
				puts config
				# create product folder
				destination = config['destination']
				FileUtils.remove_dir( destination ) if Dir.exist?( destination )
				Dir.mkdir( destination )

				generateInstance = Suland::Generate.new( config )
				generateInstance.process
			end # end build option

		end  # end option_parser

		option_parser.parse!( args )
		options
	end
end # end class SulandOptParse

commandLineParser = SulandOptParser.parse( ARGV )
puts commandLineParser
